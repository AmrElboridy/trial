version: 2.1


executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli


commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: ~/
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: ~/
          paths:
            - frontend/node_modules


  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: npm run build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results


  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results


  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: |
                npm install
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical  


  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - attach_workspace:
          at: .
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: |
                npm install
                npm audit fix
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text) >> .circleci/ansible/inventory.txt

        # curl -H "Content-Type: text/plain" -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure_infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8d:49:07:64:4b:26:46:e7:d6:3b:8c:6d:14:3a:1c:a8"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations stage
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - frontend/dist
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8d:49:07:64:4b:26:46:e7:d6:3b:8c:6d:14:3a:1c:a8"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Packaging Backend
          command: |
             cd backend
             npm i
             npm run build
             tar -czvf artifact.tar.gz dist/* package*
             cd ..
             cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
             export TYPEORM_MIGRATIONS_DIR=./migrations
             export TYPEORM_ENTITIES=./modules/domain/*/.entity{.ts,.js}
             export TYPEORM_MIGRATIONS=./migrations/*.ts
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            pip install awscli
            apk add --update curl tar gzip npm nodejs
            apk add --update ansible 
      - run:
          name: Backend smoke test.
          command: |
                export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                  --query "Reservations[*].Instances[*].PublicIpAddress" \
                  --output text)            
                export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
                echo "${API_URL}/api/status"
                if curl "${API_URL}/api/status" | grep "ok"
                then
                    exit 0
                else
                    exit 1
                fi
      - run:
          name: Frontend Smoke Test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
   #   - destroy_environment:
      #    id: ${CIRCLE_WORKFLOW_ID:0:7}
      #   when: on_fail
    #  - revert_migrations:
     #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      #    when: on_fail

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldWorkflowID=$(curl -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request GET https://api.memstash.io/values/WorkflowID)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"

              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
          environment:
            TERM: xterm-256color


workflows:
  default:
    jobs:
      ## BUILD AND DEPLOY
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure_infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure_infrastructure]
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update
